// simulate the communicator daemon, a cluck client, and nine other cluckd's
//
//    one real cluckd being tested (server: ${hostname}, service: cluckd)
//    this cluckd is the main leader (the one that manages the leaders
//    election and it is itself a leader)
//
//    then simulate a local communicatord, nine remote communicatord and
//    cluckd (rc1 to rc9)

hostname(variable_name: hostname)
set_variable(name: allow_timeout, value: 0)
max_pid(variable_name: max_pid)

random(variable_name: leader1_random, negative: 0)
set_variable(name: leader1_random_str, value: "" + ${leader1_random} % 0x100000000)
random(variable_name: leader1_pid, negative: 0)
random(variable_name: leader2_random, negative: 0)
set_variable(name: leader2_random_str, value: "" + ${leader2_random} % 0x100000000)
random(variable_name: leader2_pid, negative: 0)
//sort(var1: leader1_random_str, var2: leader2_random_str) -- test with priority instead
set_variable(name: leader0, value: "invalid-id (search on leader0 or save_parameter_value() so see where it gets set)")
set_variable(name: leader1, value: "10|" + ${leader1_random_str} + "|172.1.2.1|" + (${leader1_pid} % ${max_pid} + 1) + "|rc1")
set_variable(name: leader2, value: "13|" + ${leader2_random_str} + "|172.1.2.2|" + (${leader2_pid} % ${max_pid} + 1) + "|rc2")

random(variable_name: computer3_random, negative: 0)
set_variable(name: computer3_random_str, value: "" + ${computer3_random} % 0x100000000)
random(variable_name: computer3_pid, negative: 0)
random(variable_name: computer4_random, negative: 0)
set_variable(name: computer4_random_str, value: "" + ${computer4_random} % 0x100000000)
random(variable_name: computer4_pid, negative: 0)
random(variable_name: computer5_random, negative: 0)
set_variable(name: computer5_random_str, value: "" + ${computer5_random} % 0x100000000)
random(variable_name: computer5_pid, negative: 0)
random(variable_name: computer6_random, negative: 0)
set_variable(name: computer6_random_str, value: "" + ${computer6_random} % 0x100000000)
random(variable_name: computer6_pid, negative: 0)
random(variable_name: computer7_random, negative: 0)
set_variable(name: computer7_random_str, value: "" + ${computer7_random} % 0x100000000)
random(variable_name: computer7_pid, negative: 0)
random(variable_name: computer8_random, negative: 0)
set_variable(name: computer8_random_str, value: "" + ${computer8_random} % 0x100000000)
random(variable_name: computer8_pid, negative: 0)
random(variable_name: computer9_random, negative: 0)
set_variable(name: computer9_random_str, value: "" + ${computer9_random} % 0x100000000)
random(variable_name: computer9_pid, negative: 0)
sort(var1: computer3_random_str,
     var2: computer4_random_str,
     var3: computer5_random_str,
     var4: computer6_random_str,
     var5: computer7_random_str,
     var6: computer8_random_str,
     var7: computer9_random_str)
set_variable(name: computer3, value: "14|" + ${computer3_random_str} + "|172.1.2.3|" + (${computer3_pid} % ${max_pid} + 1) + "|rc3")
set_variable(name: computer4, value: "14|" + ${computer4_random_str} + "|172.1.2.4|" + (${computer4_pid} % ${max_pid} + 1) + "|rc4")
set_variable(name: computer5, value: "14|" + ${computer5_random_str} + "|172.1.2.5|" + (${computer5_pid} % ${max_pid} + 1) + "|rc5")
set_variable(name: computer6, value: "14|" + ${computer6_random_str} + "|172.1.2.6|" + (${computer6_pid} % ${max_pid} + 1) + "|rc6")
set_variable(name: computer7, value: "14|" + ${computer7_random_str} + "|172.1.2.7|" + (${computer7_pid} % ${max_pid} + 1) + "|rc7")
set_variable(name: computer8, value: "14|" + ${computer8_random_str} + "|172.1.2.8|" + (${computer8_pid} % ${max_pid} + 1) + "|rc8")
set_variable(name: computer9, value: "14|" + ${computer9_random_str} + "|172.1.2.9|" + (${computer9_pid} % ${max_pid} + 1) + "|rc9")



run()
listen(address: <127.0.0.1:20002>)

// the following are the messages we expect and send in the order they are
// expected to happen in production...
//
call(label: func_expect_register)
call(label: func_send_help)
call(label: func_send_ready)

call(label: func_expect_commands)

set_variable(name: service_status, value: "up")
set_variable(name: service_location, value: "rc2")
call(label: func_send_status_for_remote_communicator) // "random" location as if the other cluckd just became available

call(label: func_expect_service_status_for_fluid_settings)
call(label: func_send_status_for_fluid_settings)

call(label: func_send_info)

call(label: func_expect_fluid_settings_listen)
call(label: func_send_fluid_settings_registered)
call(label: func_send_fluid_settings_value_updated)
call(label: func_send_fluid_settings_ready)

call(label: func_expect_cluckd_status_early_on)

call(label: func_expect_cluster_status)
call(label: func_send_cluster_up)
//call(label: func_send_cluster_complete) -- this does not currently happen because the message is tested (at least when we sent a CLUSTER_STATUS message, the broadcast may still send us the message, I think)

call(label: func_send_info)

call(label: func_expect_lock_started_initial)

// --- start rc1 ---
set_variable(name: server_name, value: "rc1")
set_variable(name: lock_id, value: "${leader1}")
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_one_computer)
call(label: func_send_info)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_lock_started_early_reply)

// --- start rc2 ---
set_variable(name: server_name, value: "rc2")
set_variable(name: lock_id, value: "${leader2}")
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_two_computers)
call(label: func_send_info)

set_variable(name: server_name, value: "rc2")
call(label: func_expect_lock_started_early_reply)

// --- start rc3 ---
set_variable(name: server_name, value: "rc3")
set_variable(name: lock_id, value: "${computer3}")
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_three_computers)
call(label: func_send_info)

set_variable(name: server_name, value: "rc3")
call(label: func_expect_lock_started_early_reply)

// --- start rc4 ---
set_variable(name: server_name, value: "rc4")
set_variable(name: lock_id, value: "${computer4}")
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_four_computers)
call(label: func_send_info)

set_variable(name: server_name, value: "rc4")
call(label: func_expect_lock_started_early_reply)

// --- start rc5 ---
set_variable(name: server_name, value: "rc5")
set_variable(name: lock_id, value: "${computer5}")
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_five_computers)
call(label: func_send_info)

// with rc5 we reach the cluster quorum which means we get leaders
//
call(label: func_expect_lock_leaders)
call(label: func_expect_lock_ready)
//call(label: func_expect_lock_failed) -- removed that send for now

set_variable(name: server_name, value: "rc5")
call(label: func_expect_lock_started_reply)

// --- start rc6 ---
set_variable(name: server_name, value: "rc6")
set_variable(name: lock_id, value: "${computer6}")
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_six_computers)
call(label: func_send_info)

set_variable(name: server_name, value: "rc6")
call(label: func_expect_lock_started_reply)

// --- start rc7 ---
sleep(seconds: 0.25)
set_variable(name: server_name, value: "rc7")
set_variable(name: lock_id, value: "${computer7}")
set_variable(name: election_date, value: ${election_date} + .02)
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_seven_computers)
call(label: func_send_info)

set_variable(name: server_name, value: "rc7")
call(label: func_expect_lock_started_reply)

// --- start rc8 ---
set_variable(name: server_name, value: "rc8")
set_variable(name: lock_id, value: "${computer8}")
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_eight_computers)
call(label: func_send_info)

set_variable(name: server_name, value: "rc8")
call(label: func_expect_lock_started_reply)

// --- start rc9 ---
set_variable(name: server_name, value: "rc9")
set_variable(name: lock_id, value: "${computer9}")
call(label: func_send_lock_started)

call(label: func_expect_cluckd_status_nine_computers)
call(label: func_send_info)

set_variable(name: server_name, value: "rc9")
call(label: func_expect_lock_started_reply)

call(label: func_expect_cluckd_status_ten_computers)

// WARNING: variable is reused in the verify_lock_started and others
now(variable_name: lock_timeout)
set_variable(name: lock_timeout, value: ${lock_timeout} + 60) // now + 1 minute
call(label: func_send_lock)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_lock_entering)
call(label: func_send_lock_entered)
set_variable(name: server_name, value: "rc2")
call(label: func_expect_lock_entering)
call(label: func_send_lock_entered)

call(label: func_send_info)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_get_max_ticket)
call(label: func_send_max_ticket)
set_variable(name: server_name, value: "rc2")
call(label: func_expect_get_max_ticket)
call(label: func_send_max_ticket)

call(label: func_expect_cluckd_status_ten_computers)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_add_ticket)
call(label: func_send_ticket_added)
set_variable(name: server_name, value: "rc2")
call(label: func_expect_add_ticket)
call(label: func_send_ticket_added)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_lock_exiting)
call(label: func_send_ticket_ready)
call(label: func_send_activate_lock)
set_variable(name: server_name, value: "rc2")
call(label: func_expect_lock_exiting)
call(label: func_send_ticket_ready)
call(label: func_send_activate_lock)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_ticket_ready)
set_variable(name: server_name, value: "rc2")
call(label: func_expect_ticket_ready)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_activate_lock)
set_variable(name: server_name, value: "rc2")
call(label: func_expect_activate_lock)

call(label: func_expect_locked)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_lock_activated)
set_variable(name: server_name, value: "rc2")
call(label: func_expect_lock_activated)

//call(label: func_expect_cluckd_status_with_ticket)
call(label: func_expect_cluckd_status_ten_computers)

call(label: func_expect_unlocking)

call(label: func_sleep_quietly_25cs)
call(label: func_send_unlock)

set_variable(name: server_name, value: "rc1")
call(label: func_expect_drop_ticket)
set_variable(name: server_name, value: "rc2")
call(label: func_expect_drop_ticket)

// test a quite special case where a computer (rc8) disappears and then
// another gets election results with the computer back in the game
// then finally that computer (rc8) reconnects to cluckd
//
set_variable(name: server_name, value: "rc8")
call(label: func_send_hangup)
// --- if we still need the former leader2 ID we'll need to save it here ---
set_variable(name: leader2, value: "${computer8}") // change the list of leaders a bit

set_variable(name: server_name, value: "rc9")
set_variable(name: lock_id, value: "${computer9}")
set_variable(name: election_date, value: ${election_date} + .02)
call(label: func_send_lock_started)
set_variable(name: server_name, value: "rc9")

set_variable(name: server_name, value: "rc8")
set_variable(name: lock_id, value: "${computer8}")
call(label: func_send_lock_started)
set_variable(name: server_name, value: "rc8")
call(label: func_expect_lock_started_reply)

call(label: func_expect_no_lock)

// I'm not too sure why this happens later like this...
set_variable(name: server_name, value: "rc9")
call(label: func_expect_lock_started_reply)

call(label: func_expect_lock_ready)

// again, why is this one re-happening and "late"?
set_variable(name: server_name, value: "rc8")
call(label: func_expect_lock_started_reply)





// make sure that we are done and exit
//
// TODO: at this time, in draining mode, we do not listen to sockets that
//       are in read mode, only the write interest us to drain our data;
//       that means we never hear about messages sent to us in that mode
//       yet that's something we'd like to hear about
//
call(label: func_send_stop)
print(message: "--- draining ---")
clear_message()
has_message()
if(true: got_unexpected_message)
wait(timeout: 5, mode: drain)
has_message()
if(true: got_unexpected_message)
exit()

label(name: got_unexpected_message)
show_message()
exit(error_message: "got message while draining final send()")






// function: Wait Message
//
// if the wait times out, it is an error
// the function shows the message before returning
//
label(name: func_wait_message)
clear_message()
has_message() // the previous wait() may have read several messages at once
if(true: already_got_next_message)
label(name: wait_for_a_message)
wait(timeout: 12, mode: wait)
has_message()
if(false: wait_for_a_message) // woke up without a message, wait some more
label(name: already_got_next_message)
show_message()
return()

// function: Sleep Quietly
//
// wait for 0.25 seconds
// the function generates an error if it receives a message while waiting
//
label(name: func_sleep_quietly_25cs)
print(message: "--- quick sleep ---")
clear_message()
wait(timeout: 0.25, mode: timeout) // we are allowed to timeout
has_message()
if(false: exit_sleep_quietly_25cs)
show_message()
exit(error_message: "received a message while waiting quietly.")
label(name: exit_sleep_quietly_25cs)
return()









// Function: expect REGISTER
label(name: func_expect_register)
print(message: "--- expect REGISTER ---")
call(label: func_wait_message)
call(label: func_verify_register)
return()

// Function: expect COMMANDS
label(name: func_expect_commands)
print(message: "--- expect COMMANDS ---")
call(label: func_wait_message)
call(label: func_verify_commands)
return()

// Function: expect SERVICE_STATUS
label(name: func_expect_service_status_for_fluid_settings)
print(message: "--- expect SERVICE_STATUS ---")
call(label: func_wait_message)
call(label: func_verify_service_status_for_fluid_settings)
return()

// Function: expect FLUID_SETTINGS_LISTEN
label(name: func_expect_fluid_settings_listen)
print(message: "--- expect FLUID_SETTINGS_LISTEN ---")
call(label: func_wait_message)
call(label: func_verify_fluid_settings_listen)
return()

// Function: expect LOCK_STARTED
label(name: func_expect_lock_started_initial)
print(message: "--- wait for message LOCK_STARTED (initial)....")
call(label: func_wait_message)
call(label: func_verify_lock_started_broadcast_initial)
return()

// Function: expect CLUCKD_STATUS (early on: not even ready)
label(name: func_expect_cluckd_status_early_on)
print(message: "--- wait for message CLUCKD_STATUS (early on)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_early_on)
return()

// Function: expect CLUCKD_STATUS (one computer)
label(name: func_expect_cluckd_status_one_computer)
print(message: "--- wait for message CLUCKD_STATUS (1 computer)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_one_computer)
return()

// Function: expect CLUCKD_STATUS (2 computers)
label(name: func_expect_cluckd_status_two_computers)
print(message: "--- wait for message CLUCKD_STATUS (2 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_two_computers)
return()

// Function: expect CLUCKD_STATUS (3 computers)
label(name: func_expect_cluckd_status_three_computers)
print(message: "--- wait for message CLUCKD_STATUS (3 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_three_computers)
return()

// Function: expect CLUCKD_STATUS (4 computers)
label(name: func_expect_cluckd_status_four_computers)
print(message: "--- wait for message CLUCKD_STATUS (4 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_four_computers)
return()

// Function: expect CLUCKD_STATUS (5 computers)
label(name: func_expect_cluckd_status_five_computers)
print(message: "--- wait for message CLUCKD_STATUS (5 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_five_computers)
return()

// Function: expect CLUCKD_STATUS (6 computers)
label(name: func_expect_cluckd_status_six_computers)
print(message: "--- wait for message CLUCKD_STATUS (6 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_six_computers)
return()

// Function: expect CLUCKD_STATUS (7 computers)
label(name: func_expect_cluckd_status_seven_computers)
print(message: "--- wait for message CLUCKD_STATUS (7 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_seven_computers)
return()

// Function: expect CLUCKD_STATUS (8 computers)
label(name: func_expect_cluckd_status_eight_computers)
print(message: "--- wait for message CLUCKD_STATUS (8 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_eight_computers)
return()

// Function: expect CLUCKD_STATUS (9 computers)
label(name: func_expect_cluckd_status_nine_computers)
print(message: "--- wait for message CLUCKD_STATUS (9 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_nine_computers)
return()

// Function: expect CLUCKD_STATUS (10 computers)
label(name: func_expect_cluckd_status_ten_computers)
print(message: "--- wait for message CLUCKD_STATUS (10 computers)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_ten_computers)
return()

// Function: expect CLUCKD_STATUS (with ticket)
label(name: func_expect_cluckd_status_with_ticket)
print(message: "--- wait for message CLUCKD_STATUS (with ticket)....")
call(label: func_wait_message)
call(label: func_verify_cluckd_status_with_ticket)
return()

label(name: func_expect_lock_leaders)
print(message: "--- wait for message LOCK_LEADERS....")
call(label: func_wait_message)
call(label: func_verify_lock_leaders)
return()

// Function:: expect LOCK_READY
label(name: func_expect_lock_ready)
print(message: "--- wait for message LOCK_READY....")
call(label: func_wait_message)
call(label: func_verify_lock_ready)
return()

// Function: expect LOCK_STARTED (early reply)
label(name: func_expect_lock_started_early_reply)
// this reply does not yet include the leaders (too early)
print(message: "--- wait for message LOCK_STARTED (early reply: ${server_name})....")
call(label: func_wait_message)
call(label: func_verify_lock_started_early_reply)
return()

// Function: expect LOCK_STARTED (reply)
label(name: func_expect_lock_started_reply)
print(message: "--- wait for message LOCK_STARTED (early reply: ${server_name})....")
call(label: func_wait_message)
call(label: func_verify_lock_started_reply)
return()

// Function: expect CLUSTER_STATUS
label(name: func_expect_cluster_status)
print(message: "--- wait for message CLUSTER_STATUS....")
call(label: func_wait_message)
call(label: func_verify_cluster_status)
return()

// Function: expect NO_LOCK
label(name: func_expect_no_lock)
print(message: "--- wait for message NO_LOCK....")
call(label: func_wait_message)
call(label: func_verify_no_lock)
return()

// Function: expect LOCK_FAILED
//label(name: func_expect_lock_failed)
//print(message: "--- wait for message LOCK_FAILED....")
//call(label: func_wait_message)
//call(label: func_verify_lock_failed)
//now(variable_name: timeout)
//set_variable(name: timeout, value: ${timeout} + 60) // now + 1 minute
//call(label: func_send_lock)
//return()

// Function: expect LOCK_ENTERING
label(name: func_expect_lock_entering)
print(message: "--- wait for message LOCK_ENTERING (${server_name})....")
call(label: func_wait_message)
call(label: func_verify_lock_entering)
return()

// Function: expect GET_MAX_TICKET
label(name: func_expect_get_max_ticket)
print(message: "--- wait for message GET_MAX_TICKET (${server_name})....")
call(label: func_wait_message)
call(label: func_verify_get_max_ticket)
return()

// Function: expect ADD_TICKET
label(name: func_expect_add_ticket)
print(message: "--- wait for message ADD_TICKET (${server_name})....")
call(label: func_wait_message)
call(label: func_verify_add_ticket)
return()

// Function: expect LOCK_EXITING
label(name: func_expect_lock_exiting)
print(message: "--- wait for message LOCK_EXITING (${server_name})....")
call(label: func_wait_message)
call(label: func_verify_lock_exiting)
return()

// Function: expect TICKET_READY
label(name: func_expect_ticket_ready)
print(message: "--- wait for message TICKET_READY (${server_name})....")
call(label: func_wait_message)
call(label: func_verify_ticket_ready)
return()

// Function: expect ACTIVATE_LOCK
label(name: func_expect_activate_lock)
print(message: "--- wait for message ACTIVATE_LOCK (${server_name})....")
call(label: func_wait_message)
call(label: func_verify_activate_lock)
return()

// Function: expect LOCKED
label(name: func_expect_locked)
print(message: "--- wait for message LOCKED....")
call(label: func_wait_message)
call(label: func_verify_locked)
call(label: func_send_info)
return()

// Function: expect LOCK_ACTIVATED
label(name: func_expect_lock_activated)
print(message: "--- wait for message LOCK_ACTIVATED....")
call(label: func_wait_message)
call(label: func_verify_lock_activated)
set_variable(name: allow_timeout, value: 1)
return()

// Function: expect UNLOCKING
label(name: func_expect_unlocking)
print(message: "--- wait for message UNLOCKING....")
call(label: func_wait_message)
call(label: func_verify_unlocking)
//call(label: func_send_quitting)
//clear_message()
//wait(timeout: 5, mode: drain)
return()

// Function: expect DROP_TOCKET
label(name: func_expect_drop_ticket)
print(message: "--- wait for message DROP_TOCKET (${server_name})....")
call(label: func_wait_message)
call(label: func_verify_drop_ticket)
return()








// Function: verify REGISTER 
label(name: func_verify_register)
verify_message(
	command: REGISTER,
	required_parameters: {
		service: cluckd,
		version: 1
	})
return()

// Function: verify a LOCKED reply
label(name: func_verify_locked)
verify_message(
	command: LOCKED,
	server: ${hostname},
	service: website,
	required_parameters: {
		object_name: "lock1",
		timeout_date: `^[0-9]+(\\.[0-9]+)?$`,
		unlocked_date: `^[0-9]+(\\.[0-9]+)?$`
	})
return()

// Function: verify a COMMANDS reply
label(name: func_verify_commands)
verify_message(
	command: COMMANDS,
	required_parameters: {
		list: "ABSOLUTELY,ACTIVATE_LOCK,ADD_TICKET,ALIVE,CLUSTER_DOWN,CLUSTER_UP,DISCONNECTED,DROP_TICKET,FLUID_SETTINGS_DEFAULT_VALUE,FLUID_SETTINGS_DELETED,FLUID_SETTINGS_OPTIONS,FLUID_SETTINGS_READY,FLUID_SETTINGS_REGISTERED,FLUID_SETTINGS_UPDATED,FLUID_SETTINGS_VALUE,FLUID_SETTINGS_VALUE_UPDATED,GET_MAX_TICKET,HANGUP,HELP,INFO,INVALID,LEAK,LIST_TICKETS,LOCK,LOCK_ACTIVATED,LOCK_ENTERED,LOCK_ENTERING,LOCK_EXITING,LOCK_FAILED,LOCK_LEADERS,LOCK_STARTED,LOCK_STATUS,LOCK_TICKETS,LOG_ROTATE,MAX_TICKET,QUITTING,READY,RESTART,SERVICE_UNAVAILABLE,STATUS,STOP,TICKET_ADDED,TICKET_READY,UNKNOWN,UNLOCK"
	})
return()

// Function: verify a SERVICE_STATUS reply
label(name: func_verify_service_status_for_fluid_settings)
verify_message(
	command: SERVICE_STATUS,
	required_parameters: {
		service: 'fluid_settings'
	})
return()

// Function: verify a FLUID_SETTINGS_LISTEN
label(name: func_verify_fluid_settings_listen)
verify_message(
	command: FLUID_SETTINGS_LISTEN,
	required_parameters: {
		cache: "no;reply",
		names: "cluckd::server-name"
	})
return()

// Function: verify LOCK STARTED (initial)
label(name: func_verify_lock_started_broadcast_initial)
print(message: "--- verify message LOCK_STARTED (initial)....")
verify_message(
	command: LOCK_STARTED,
	sent_service: cluckd,
	service: "*", // this one was broadcast
	required_parameters: {
		// here we do not yet know what the ${leader1} id is going to be
		lock_id: `^05\\|[0-9]+\\|127.0.0.1\\|[0-9]+\\|${hostname}$`,
		server_name: ${hostname},
		start_time: `^[0-9]+(\\.[0-9]+)?$`
	},
	forbidden_parameters: {
		election_date,
		leader0,
		leader1,
		leader2
	})
// get the lock_id to leader0 so we can us it again later
save_parameter_value(parameter_name: lock_id, variable_name: leader0)
return()

// Function: verify a LOCK STARTED (before elections)
label(name: func_verify_lock_started_early_reply)
verify_message(
	command: LOCK_STARTED,
	sent_service: cluckd,
	server: ${server_name},
	service: cluckd,
	required_parameters: {
		lock_id: "${leader0}",
		server_name: ${hostname},
		start_time: `^[0-9]+(\\.[0-9]+)?$`
	},
	forbidden_parameters: {
		election_date,
		leader0,
		leader1,
		leader2
	})
return()

// Function: verify a LOCK STARTED (after elections)
label(name: func_verify_lock_started_reply)
save_parameter_value(parameter_name: election_date, variable_name: election_date)
set_variable(name: election_date, value: "${election_date}", type: timestamp)
verify_message(
	command: LOCK_STARTED,
	sent_service: cluckd,
	server: ${server_name},
	service: cluckd,
	required_parameters: {
		election_date: `^[0-9]+(\\.[0-9]+)?$`,
		leader0: "${leader0}",
		leader1: "${leader1}",
		leader2: "${leader2}",
		lock_id: "${leader0}",
		server_name: ${hostname},
		start_time: `^[0-9]+(\\.[0-9]+)?$`
	})
return()

// Function: verify a NO_LOCK
label(name: func_verify_no_lock)
verify_message(
	command: NO_LOCK,
	sent_service: "cluckd",
	service: ".",
	required_parameters: {
		cache: "no"
	})
return()

// Function: verify a LOCK READY
label(name: func_verify_lock_ready)
verify_message(
	command: LOCK_READY,
	sent_service: "cluckd",
	service: ".",
	required_parameters: {
		cache: "no"
	})
return()

// Function: verify a CLUSTER_STATUS
label(name: func_verify_cluster_status)
verify_message(
	sent_service: cluckd,
	command: CLUSTER_STATUS,
	service: communicatord)
return()

// Function: verify a LOCK LEADERS
label(name: func_verify_lock_leaders)
verify_message(
	command: LOCK_LEADERS,
	service: "*",
	required_parameters: {
		election_date: `^[0-9]+(\\.[0-9]+)?$`,
		leader0: "${leader0}",
		leader1: "${leader1}",
		leader2: "${leader2}"
	})
return()

// Function: verify a LOCK FAILED
label(name: func_verify_lock_failed)
verify_message(
	command: LOCK_FAILED,
	sent_service: cluckd,
	server: "${hostname}",
	service: website,
	required_parameters: {
		error: "timedout",
		key: "${hostname}/123",
		object_name: "lock1",
		tag: 505
	})
return()

// Function: verify a UNLOCKED
label(name: func_verify_unlocked)
verify_message(
	command: UNLOCKED,
	server: "${hostname}",
	service: "website",
	required_parameters: {
		object_name: "lock1"
	})
return()

// Function: verify a UNLOCKING
label(name: func_verify_unlocking)
verify_message(
	command: UNLOCKING,
	server: "${hostname}",
	service: "website",
	required_parameters: {
		error: "timedout",
		object_name: "lock1",
		tag: "505"
	})
return()

// Function: verify a LOCK_ENTERING
label(name: func_verify_lock_entering)
verify_message(
	command: LOCK_ENTERING,
	sent_service: "cluckd",
	server: "${server_name}",
	service: "cluckd",
	required_parameters: {
		duration: `^[0-9]+$`,
		key: "${hostname}/123",
		object_name: "lock1",
		serial: `^[0-9]+$`,
		source: "${hostname}/website",
		tag: `^[0-9]+$`,
		timeout: `^[0-9]+(\\.[0-9]+)?$`
	})
return()

// Function: verify a GET_MAX_TICKET
label(name: func_verify_get_max_ticket)
verify_message(
	command: GET_MAX_TICKET,
	sent_service: "cluckd",
	server: "${server_name}",
	service: "cluckd",
	required_parameters: {
		key: "${hostname}/123",
		object_name: "lock1",
		tag: "505"
	})
return()

// Function: verify a ADD_TICKET
label(name: func_verify_add_ticket)
verify_message(
	command: ADD_TICKET,
	sent_service: "cluckd",
	server: "${server_name}",
	service: "cluckd",
	required_parameters: {
		// we send MAX_TICKET of 111 and 111 + 1 is 0x70
		key: "00000070/${hostname}/123",
		object_name: "lock1",
		tag: "505",
		timeout: `^[0-9]+(\\.[0-9]+)$`
	})
return()

// Function: verify a LOCK_EXITING
label(name: func_verify_lock_exiting)
verify_message(
	command: LOCK_EXITING,
	sent_service: "cluckd",
	server: "${server_name}",
	service: "cluckd",
	required_parameters: {
		key: "${hostname}/123",
		object_name: "lock1",
		tag: "505"
	})
return()

// Function: verify a TICKET_READY
label(name: func_verify_ticket_ready)
verify_message(
	command: TICKET_READY,
	sent_service: "cluckd",
	server: "${server_name}",
	service: "cluckd",
	required_parameters: {
		key: "00000070/${hostname}/123",
		object_name: "lock1",
		tag: "505"
	})
return()

// Function: verify a ACTIVATE_LOCK
label(name: func_verify_activate_lock)
verify_message(
	command: ACTIVATE_LOCK,
	sent_service: "cluckd",
	server: "${server_name}",
	service: "cluckd",
	required_parameters: {
		key: "00000070/${hostname}/123",
		object_name: "lock1",
		tag: "505"
	})
return()

// Function: verify a ACTIVATE_LOCK
label(name: func_verify_lock_activated)
verify_message(
	command: LOCK_ACTIVATED,
	sent_service: "cluckd",
	server: "${server_name}",
	service: "cluckd",
	required_parameters: {
		key: "00000070/${hostname}/123",
		other_key: "00000070/${hostname}/123",
		object_name: "lock1",
		tag: "505"
	})
return()

// Function: verify a DROP_TICKET
label(name: func_verify_drop_ticket)
verify_message(
	command: DROP_TICKET,
	sent_service: "cluckd",
	server: "${server_name}",
	service: "cluckd",
	required_parameters: {
		key: "00000070/${hostname}/123",
		object_name: "lock1",
		tag: "505"
	})
return()

// Function: verify CLUCKD_STATUS (early on)
label(name: func_verify_cluckd_status_early_on)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS: ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":[],'
			+ '"daemon_ready":true,'
			+ '"id":"<not ready>",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":0,'
			+ '"neighbors_count":0,'
			+ '"neighbors_quorum":0}'
	})
return()

// Function: verify CLUCKD_STATUS (1 computer)
label(name: func_verify_cluckd_status_one_computer)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (1 computer): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","name":"' + "${hostname}" + '"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":0,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (2 computers)
label(name: func_verify_cluckd_status_two_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (2 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","name":"rc1"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":0,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (3 computers)
label(name: func_verify_cluckd_status_three_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (3 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","name":"rc1"},'
			+ '{"id":"'+ "${leader2}" + '","ip":"172.1.2.2","name":"rc2"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":0,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (4 computers)
label(name: func_verify_cluckd_status_four_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (4 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","name":"rc1"},'
			+ '{"id":"'+ "${leader2}" + '","ip":"172.1.2.2","name":"rc2"},'
			+ '{"id":"'+ "${computer3}" + '","ip":"172.1.2.3","name":"rc3"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":0,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (5 computers)
label(name: func_verify_cluckd_status_five_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (5 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","name":"rc1"},'
			+ '{"id":"'+ "${leader2}" + '","ip":"172.1.2.2","name":"rc2"},'
			+ '{"id":"'+ "${computer3}" + '","ip":"172.1.2.3","name":"rc3"},'
			+ '{"id":"'+ "${computer4}" + '","ip":"172.1.2.4","name":"rc4"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":0,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (6 computers)
label(name: func_verify_cluckd_status_six_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (6 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","leader":0,"name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","leader":1,"name":"rc1"},'
			+ '{"id":"'+ "${leader2}" + '","ip":"172.1.2.2","leader":2,"name":"rc2"},'
			+ '{"id":"'+ "${computer3}" + '","ip":"172.1.2.3","name":"rc3"},'
			+ '{"id":"'+ "${computer4}" + '","ip":"172.1.2.4","name":"rc4"},'
			+ '{"id":"'+ "${computer5}" + '","ip":"172.1.2.5","name":"rc5"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":3,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (7 computers)
label(name: func_verify_cluckd_status_seven_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (7 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","leader":0,"name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","leader":1,"name":"rc1"},'
			+ '{"id":"'+ "${leader2}" + '","ip":"172.1.2.2","leader":2,"name":"rc2"},'
			+ '{"id":"'+ "${computer3}" + '","ip":"172.1.2.3","name":"rc3"},'
			+ '{"id":"'+ "${computer4}" + '","ip":"172.1.2.4","name":"rc4"},'
			+ '{"id":"'+ "${computer5}" + '","ip":"172.1.2.5","name":"rc5"},'
			+ '{"id":"'+ "${computer6}" + '","ip":"172.1.2.6","name":"rc6"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":3,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (8 computers)
label(name: func_verify_cluckd_status_eight_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (8 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","leader":0,"name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","leader":1,"name":"rc1"},'
			+ '{"id":"'+ "${leader2}" + '","ip":"172.1.2.2","leader":2,"name":"rc2"},'
			+ '{"id":"'+ "${computer3}" + '","ip":"172.1.2.3","name":"rc3"},'
			+ '{"id":"'+ "${computer4}" + '","ip":"172.1.2.4","name":"rc4"},'
			+ '{"id":"'+ "${computer5}" + '","ip":"172.1.2.5","name":"rc5"},'
			+ '{"id":"'+ "${computer6}" + '","ip":"172.1.2.6","name":"rc6"},'
			+ '{"id":"'+ "${computer7}" + '","ip":"172.1.2.7","name":"rc7"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":3,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (9 computers)
label(name: func_verify_cluckd_status_nine_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (9 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","leader":0,"name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","leader":1,"name":"rc1"},'
			+ '{"id":"'+ "${leader2}" + '","ip":"172.1.2.2","leader":2,"name":"rc2"},'
			+ '{"id":"'+ "${computer3}" + '","ip":"172.1.2.3","name":"rc3"},'
			+ '{"id":"'+ "${computer4}" + '","ip":"172.1.2.4","name":"rc4"},'
			+ '{"id":"'+ "${computer5}" + '","ip":"172.1.2.5","name":"rc5"},'
			+ '{"id":"'+ "${computer6}" + '","ip":"172.1.2.6","name":"rc6"},'
			+ '{"id":"'+ "${computer7}" + '","ip":"172.1.2.7","name":"rc7"},'
			+ '{"id":"'+ "${computer8}" + '","ip":"172.1.2.8","name":"rc8"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":3,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (10 computers)
label(name: func_verify_cluckd_status_ten_computers)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS (10 computers): ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: rc11,
	service: stats,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","leader":0,"name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.1","leader":1,"name":"rc1"},'
			+ '{"id":"'+ "${leader2}" + '","ip":"172.1.2.2","leader":2,"name":"rc2"},'
			+ '{"id":"'+ "${computer3}" + '","ip":"172.1.2.3","name":"rc3"},'
			+ '{"id":"'+ "${computer4}" + '","ip":"172.1.2.4","name":"rc4"},'
			+ '{"id":"'+ "${computer5}" + '","ip":"172.1.2.5","name":"rc5"},'
			+ '{"id":"'+ "${computer6}" + '","ip":"172.1.2.6","name":"rc6"},'
			+ '{"id":"'+ "${computer7}" + '","ip":"172.1.2.7","name":"rc7"},'
			+ '{"id":"'+ "${computer8}" + '","ip":"172.1.2.8","name":"rc8"},'
			+ '{"id":"'+ "${computer9}" + '","ip":"172.1.2.9","name":"rc9"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":3,'
			+ '"neighbors_count":10,'
			+ '"neighbors_quorum":6}'
	})
return()

// Function: verify CLUCKD_STATUS (with ticket)
label(name: func_verify_cluckd_status_with_ticket)
save_parameter_value(parameter_name: status, variable_name: cluckd_status)
print(message: "--- verify message CLUCKD_STATUS: ${cluckd_status}")
verify_message(
	command: CLUCKD_STATUS,
	sent_service: cluckd,
	server: ${hostname},
	service: website,
	required_parameters: {
		status: '{"computers":['
			+ '{"id":"'+ "${leader0}" + '","ip":"127.0.0.1","leader":0,"name":"' + "${hostname}" + '"},'
			+ '{"id":"'+ "${leader1}" + '","ip":"172.1.2.3","leader":1,"name":"rc1"}'
			+ '],'
			+ '"daemon_ready":true,'
			+ '"id":"' + "${leader0}" + '",'
			+ '"ip":"127.0.0.1",'
			+ '"leaders_count":2,'
			+ '"neighbors_count":2,'
			+ '"neighbors_quorum":2,'
			+ '"tickets":'
				+ '"added_ticket=true'
				+ '|added_ticket_quorum=true'
				+ '|entering_key=monster/123'
				+ '|get_max_ticket=true'
				+ '|lock_duration=10'
				+ '|lock_failed=none'
				+ '|lock_timeout_date=' + `[0-9]+(\\.[0-9]+)?`
				+ '|locked=true'
				+ '|object_name=lock1'
				+ '|obtention_timeout=' + `[0-9]+(\\.[0-9]+)?`
				+ '|our_ticket=112'
				+ '|owner=monster'
				+ '|serial=1'
				+ '|server_name=monster'
				+ '|service_name=website'
				+ '|tag=505'
				+ '|ticket_key=00000070/monster/123'
				+ '|ticket_ready=true'
				+ '|unlock_duration=10\\n"}'
	})
return()








// Function: send HELP
label(name: func_send_help)
send_message(
	command: HELP
	//server: ${hostname}, -- the source is not added in this case
	//service: communicatord
	)
return()

// Function: send READY
label(name: func_send_ready)
send_message(
	command: READY,
	//server: ${hostname}, -- the source is not added in this case
	//service: communicatord,
	parameters: {
		my_address: "127.0.0.1"
	})
return()

// Function: send STATUS
// Parameters: ${service_status} -- "up" or "down"
// Parameters: ${service_location} -- "<server name>"
label(name: func_send_status_for_remote_communicator)
now(variable_name: now)
compare(expression: ${service_status} <=> "up")
if(not_equal: func_send_status_down)
send_message(
	command: STATUS,
	//server: ${hostname}, -- the source is not added in this case
	//service: communicatord,
	parameters: {
		server_name: ${service_location},
		service: "remote communicator (in)",
		cache: no,
		server: ${service_location},
		status: "up",
		up_since: ${now}
	})
return()
label(name: func_send_status_down)
send_message(
	command: STATUS,
	//server: ${hostname}, -- the source is not added in this case
	//service: communicatord,
	parameters: {
		server_name: ${service_location},
		service: "remote communicator (in)",
		cache: no,
		server: ${service_location},
		status: "down",
		down_since: ${now} // TODO: when the status is "down", we need to use "down_since: ..." instead
	})
return()

// Function: send STATUS/fluid_settings
label(name: func_send_status_for_fluid_settings)
save_parameter_value(parameter_name: service, variable_name: service_name)
print(message: "--- service name in STATUS message is: ${service_name}")
now(variable_name: now)
// IMPORTANT:
// this is sent, but we do not get a reply at the moment because the only
// registered name would be the --server-name parameter and that's passed
// on the command line
send_message(
	command: STATUS,
	parameters: {
		service: "fluid_settings",
		cache: no,
		server: "${hostname}",
		status: "up",
		up_since: ${now}
	})
return()

// Function: send FLUID_SETTINGS_REGISTERED
label(name: func_send_fluid_settings_registered)
send_message(
	command: FLUID_SETTINGS_REGISTERED,
	server: ${hostname},
	service: cluckd)
return()

// Function: send FLUID_SETTINGS_VALUE_UPDATED
label(name: func_send_fluid_settings_value_updated)
send_message(
	command: FLUID_SETTINGS_VALUE_UPDATED,
	server: ${hostname},
	service: cluckd,
	parameters: {
		name: "cluckd::server-name",
		value: "this_very_server",
		message: "current value"
	})
return()

// Function: send FLUID_SETTINGS_READY
label(name: func_send_fluid_settings_ready)
send_message(
	command: FLUID_SETTINGS_READY,
	server: ${hostname},
	service: cluckd,
	parameters: {
		errcnt: 31
	})
return()

// Function: send LOCK_STATUS
label(name: func_send_lock_status)
send_message(
	command: LOCK_STATUS,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd)
return()

// Function: send INFO
label(name: func_send_info)
send_message(
	command: INFO,
	sent_server: rc11,
	sent_service: stats,
	server: ${hostname},
	service: cluckd,
	parameters: {
		mode: "info"
	})
return()

// Function: send CLUSTER_UP
label(name: func_send_cluster_up)
send_message(
	command: CLUSTER_UP,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		neighbors_count: 10
	})
return()

// Function: send CLUSTER_COMPLETE
label(name: func_send_cluster_complete)
send_message(
	command: CLUSTER_COMPLETE,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		neighbors_count: 2
	})
return()

// Function: send LOCK
// Parameters: ${timeout} -- when the LOCK request times out
label(name: func_send_lock)
send_message(
	command: LOCK,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "lock1",
		tag: 505,
		pid: 123,
		duration: 10,
		timeout: ${lock_timeout}
	})
return()

// Function: send LOCK_STARTED
// Parameters: ${server_name} -- the name of the server sending the message
// Parameters: ${lock_id} -- the identifier used as the lock_id parameter
label(name: func_send_lock_started)
now(variable_name: now)
compare(expression: "${election_date}" <=> "")
if(not_equal: func_send_lock_started_with_election_date)
send_message(
	command: LOCK_STARTED,
	sent_server: ${server_name},
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
		lock_id: ${lock_id},
		server_name: ${server_name},
		start_time: ${now}
	})
return()
label(name: func_send_lock_started_with_election_date)
send_message(
	command: LOCK_STARTED,
	sent_server: ${server_name},
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
		election_date: ${election_date},
		leader0: "${leader0}",
		leader1: "${leader1}",
		leader2: "${leader2}",
		lock_id: ${lock_id},
		server_name: ${server_name},
		start_time: ${now}
	})
return()

// Function: send LOCK_ENTERED
label(name: func_send_lock_entered)
send_message(
	command: LOCK_ENTERED,
	sent_server: ${hostname},
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
            object_name: "lock1",
	    tag: "505",
            key: "${hostname}/123"
	})
return()

// Function: send MAX_TICKET
label(name: func_send_max_ticket)
send_message(
	command: MAX_TICKET,
	sent_server: "rc1",
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
            object_name: "lock1",
	    tag: "505",
            key: "${hostname}/123",
	    ticket_id: 111   // TBD: we could also send NO_TICKET here?
	})
return()

// Function: send TICKET_ADDED
label(name: func_send_ticket_added)
send_message(
	command: TICKET_ADDED,
	sent_server: "rc1",
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
            object_name: "lock1",
	    tag: "505",
            key: "00000070/${hostname}/123"
	})
return()

// Function: send TICKET_READY
label(name: func_send_ticket_ready)
send_message(
	command: TICKET_READY,
	sent_server: "${server_name}",
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
            object_name: "lock1",
	    tag: "505",
            key: "00000070/${hostname}/123"
	})
return()

// Function: send ACTIVATE_LOCK
label(name: func_send_activate_lock)
send_message(
	command: ACTIVATE_LOCK,
	sent_server: "${server_name}",
	sent_service: cluckd,
	server: ${hostname},
	service: cluckd,
	parameters: {
            object_name: "lock1",
	    tag: "505",
            key: "00000070/${hostname}/123"
	})
return()

// Function: send UNLOCK
label(name: func_send_unlock)
send_message(
	command: UNLOCK,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		object_name: "lock1",
		pid: 123,
		tag: "505"
	})
return()

// Function: send HANGUP
label(name: func_send_hangup)
send_message(
	command: HANGUP,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd,
	parameters: {
		server_name: ${server_name}
	})
return()

// Function: send STOP
label(name: func_send_stop)
send_message(
	command: STOP,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd)
return()

// Function: send QUITTING
label(name: func_send_quitting)
send_message(
	command: QUITTING,
	sent_server: ${hostname},
	sent_service: website,
	server: ${hostname},
	service: cluckd)
return()

